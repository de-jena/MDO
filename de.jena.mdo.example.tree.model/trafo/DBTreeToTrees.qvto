// import UTMToDegree Blackbox
import de.mdo.jena.geo.UTMToDegBB;
// these are the model A requirements
modeltype TREES "strict" uses trees('http://example.de/trees/1.0');
// these are the model B requirements
modeltype DBTREE "strict" uses dbtree('http://jena.de/mdo/tree/1.0');



transformation DBTreeToTrees(in dbtree : DBTREE, out trees : TREES);

/*
/In the main() you need to specify which kind of objects you want to map from model A to model B.
/In the example below we are saying to take all the object of class ClassInModelA of the model A and to map them
/to model B through the map toModelB(), which is defined below.
*/ 
main() {
	dbtree.rootObjects()[DBTree]->map toTrees();
}


/*
/Here you specify what the map toModelB() does. The syntax is always the same as here. In the map body you link
/the attributes in model B to the ones in model A. The notation self refers to the model A.
/With the . you map one element of A into one element of B. With -> instead you map all elements of A into all elements
/of B (use this for lists of objects). When the two properties you need to map are not of the same type you could use a 
/query to map them (see in the library).
*/
mapping dbtree::DBTree::toTrees() : trees::CityTree {
	
	id := self.treeId.toString();
	number := self.number;
	year := self.plantYear;
	location := self.map toLocation();
	dimension := self.map toDimension();
	kind := self.map toKind();
}

mapping dbtree::DBTree::toLocation() : trees::Location {
	longitude := self.getLongitude();
	latitude := self.getLatitude();
	area := self.area;
	name := self.location;
	description := self.street;
}

mapping dbtree::DBTree::toDimension() : trees::Dimension {
	diameterTop := self.diameterTreeTop;
	diameterTrunk := self.diameterTreeTrunk;
	extentTrunk := self.extentTreeTrunk;
	height := self.height;
}

mapping dbtree::DBTree::toKind() : trees::Kind {
	name := self.genre;
	type := self.genreType;
	description := self.genreDetail;
}

