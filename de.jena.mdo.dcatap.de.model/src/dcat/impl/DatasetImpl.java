/**
 */
package dcat.impl;

import dcat.Dataset;
import dcat.DcatPackage;

import dcatde.ContributorID;

import java.math.BigDecimal;

import java.util.Collection;

import javax.xml.datatype.Duration;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import rdf.Resource;

import skos.Concept;

import terms.Location;
import terms.PeriodOfTime;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dataset</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dcat.impl.DatasetImpl#getDistribution <em>Distribution</em>}</li>
 *   <li>{@link dcat.impl.DatasetImpl#getSpatialResolutionInMeters <em>Spatial Resolution In Meters</em>}</li>
 *   <li>{@link dcat.impl.DatasetImpl#getTemporalResolution <em>Temporal Resolution</em>}</li>
 *   <li>{@link dcat.impl.DatasetImpl#getAccrualPeriodicity <em>Accrual Periodicity</em>}</li>
 *   <li>{@link dcat.impl.DatasetImpl#getSpatial <em>Spatial</em>}</li>
 *   <li>{@link dcat.impl.DatasetImpl#getTemporal <em>Temporal</em>}</li>
 *   <li>{@link dcat.impl.DatasetImpl#getWasGeneratedBy <em>Was Generated By</em>}</li>
 *   <li>{@link dcat.impl.DatasetImpl#getContributorID <em>Contributor ID</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DatasetImpl extends DcatResourceImpl implements Dataset {
	/**
	 * The cached value of the '{@link #getDistribution() <em>Distribution</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDistribution()
	 * @generated
	 * @ordered
	 */
	protected EList<Resource> distribution;

	/**
	 * The cached value of the '{@link #getSpatialResolutionInMeters() <em>Spatial Resolution In Meters</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSpatialResolutionInMeters()
	 * @generated
	 * @ordered
	 */
	protected EList<BigDecimal> spatialResolutionInMeters;

	/**
	 * The cached value of the '{@link #getTemporalResolution() <em>Temporal Resolution</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTemporalResolution()
	 * @generated
	 * @ordered
	 */
	protected EList<Duration> temporalResolution;

	/**
	 * The cached value of the '{@link #getAccrualPeriodicity() <em>Accrual Periodicity</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAccrualPeriodicity()
	 * @generated
	 * @ordered
	 */
	protected Concept accrualPeriodicity;

	/**
	 * The cached value of the '{@link #getSpatial() <em>Spatial</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSpatial()
	 * @generated
	 * @ordered
	 */
	protected EList<Location> spatial;

	/**
	 * The cached value of the '{@link #getTemporal() <em>Temporal</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTemporal()
	 * @generated
	 * @ordered
	 */
	protected EList<PeriodOfTime> temporal;

	/**
	 * The cached value of the '{@link #getWasGeneratedBy() <em>Was Generated By</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getWasGeneratedBy()
	 * @generated
	 * @ordered
	 */
	protected EList<String> wasGeneratedBy;

	/**
	 * The cached value of the '{@link #getContributorID() <em>Contributor ID</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getContributorID()
	 * @generated
	 * @ordered
	 */
	protected ContributorID contributorID;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatasetImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return DcatPackage.Literals.DATASET;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Resource> getDistribution() {
		if (distribution == null) {
			distribution = new EObjectContainmentEList<Resource>(Resource.class, this, DcatPackage.DATASET__DISTRIBUTION);
		}
		return distribution;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<BigDecimal> getSpatialResolutionInMeters() {
		if (spatialResolutionInMeters == null) {
			spatialResolutionInMeters = new EDataTypeEList<BigDecimal>(BigDecimal.class, this, DcatPackage.DATASET__SPATIAL_RESOLUTION_IN_METERS);
		}
		return spatialResolutionInMeters;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Duration> getTemporalResolution() {
		if (temporalResolution == null) {
			temporalResolution = new EDataTypeEList<Duration>(Duration.class, this, DcatPackage.DATASET__TEMPORAL_RESOLUTION);
		}
		return temporalResolution;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Concept getAccrualPeriodicity() {
		return accrualPeriodicity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetAccrualPeriodicity(Concept newAccrualPeriodicity, NotificationChain msgs) {
		Concept oldAccrualPeriodicity = accrualPeriodicity;
		accrualPeriodicity = newAccrualPeriodicity;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DcatPackage.DATASET__ACCRUAL_PERIODICITY, oldAccrualPeriodicity, newAccrualPeriodicity);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setAccrualPeriodicity(Concept newAccrualPeriodicity) {
		if (newAccrualPeriodicity != accrualPeriodicity) {
			NotificationChain msgs = null;
			if (accrualPeriodicity != null)
				msgs = ((InternalEObject)accrualPeriodicity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DcatPackage.DATASET__ACCRUAL_PERIODICITY, null, msgs);
			if (newAccrualPeriodicity != null)
				msgs = ((InternalEObject)newAccrualPeriodicity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DcatPackage.DATASET__ACCRUAL_PERIODICITY, null, msgs);
			msgs = basicSetAccrualPeriodicity(newAccrualPeriodicity, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DcatPackage.DATASET__ACCRUAL_PERIODICITY, newAccrualPeriodicity, newAccrualPeriodicity));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Location> getSpatial() {
		if (spatial == null) {
			spatial = new EObjectContainmentEList<Location>(Location.class, this, DcatPackage.DATASET__SPATIAL);
		}
		return spatial;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<PeriodOfTime> getTemporal() {
		if (temporal == null) {
			temporal = new EObjectContainmentEList<PeriodOfTime>(PeriodOfTime.class, this, DcatPackage.DATASET__TEMPORAL);
		}
		return temporal;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<String> getWasGeneratedBy() {
		if (wasGeneratedBy == null) {
			wasGeneratedBy = new EDataTypeEList<String>(String.class, this, DcatPackage.DATASET__WAS_GENERATED_BY);
		}
		return wasGeneratedBy;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ContributorID getContributorID() {
		return contributorID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetContributorID(ContributorID newContributorID, NotificationChain msgs) {
		ContributorID oldContributorID = contributorID;
		contributorID = newContributorID;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DcatPackage.DATASET__CONTRIBUTOR_ID, oldContributorID, newContributorID);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setContributorID(ContributorID newContributorID) {
		if (newContributorID != contributorID) {
			NotificationChain msgs = null;
			if (contributorID != null)
				msgs = ((InternalEObject)contributorID).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DcatPackage.DATASET__CONTRIBUTOR_ID, null, msgs);
			if (newContributorID != null)
				msgs = ((InternalEObject)newContributorID).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DcatPackage.DATASET__CONTRIBUTOR_ID, null, msgs);
			msgs = basicSetContributorID(newContributorID, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DcatPackage.DATASET__CONTRIBUTOR_ID, newContributorID, newContributorID));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case DcatPackage.DATASET__DISTRIBUTION:
				return ((InternalEList<?>)getDistribution()).basicRemove(otherEnd, msgs);
			case DcatPackage.DATASET__ACCRUAL_PERIODICITY:
				return basicSetAccrualPeriodicity(null, msgs);
			case DcatPackage.DATASET__SPATIAL:
				return ((InternalEList<?>)getSpatial()).basicRemove(otherEnd, msgs);
			case DcatPackage.DATASET__TEMPORAL:
				return ((InternalEList<?>)getTemporal()).basicRemove(otherEnd, msgs);
			case DcatPackage.DATASET__CONTRIBUTOR_ID:
				return basicSetContributorID(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case DcatPackage.DATASET__DISTRIBUTION:
				return getDistribution();
			case DcatPackage.DATASET__SPATIAL_RESOLUTION_IN_METERS:
				return getSpatialResolutionInMeters();
			case DcatPackage.DATASET__TEMPORAL_RESOLUTION:
				return getTemporalResolution();
			case DcatPackage.DATASET__ACCRUAL_PERIODICITY:
				return getAccrualPeriodicity();
			case DcatPackage.DATASET__SPATIAL:
				return getSpatial();
			case DcatPackage.DATASET__TEMPORAL:
				return getTemporal();
			case DcatPackage.DATASET__WAS_GENERATED_BY:
				return getWasGeneratedBy();
			case DcatPackage.DATASET__CONTRIBUTOR_ID:
				return getContributorID();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case DcatPackage.DATASET__DISTRIBUTION:
				getDistribution().clear();
				getDistribution().addAll((Collection<? extends Resource>)newValue);
				return;
			case DcatPackage.DATASET__SPATIAL_RESOLUTION_IN_METERS:
				getSpatialResolutionInMeters().clear();
				getSpatialResolutionInMeters().addAll((Collection<? extends BigDecimal>)newValue);
				return;
			case DcatPackage.DATASET__TEMPORAL_RESOLUTION:
				getTemporalResolution().clear();
				getTemporalResolution().addAll((Collection<? extends Duration>)newValue);
				return;
			case DcatPackage.DATASET__ACCRUAL_PERIODICITY:
				setAccrualPeriodicity((Concept)newValue);
				return;
			case DcatPackage.DATASET__SPATIAL:
				getSpatial().clear();
				getSpatial().addAll((Collection<? extends Location>)newValue);
				return;
			case DcatPackage.DATASET__TEMPORAL:
				getTemporal().clear();
				getTemporal().addAll((Collection<? extends PeriodOfTime>)newValue);
				return;
			case DcatPackage.DATASET__WAS_GENERATED_BY:
				getWasGeneratedBy().clear();
				getWasGeneratedBy().addAll((Collection<? extends String>)newValue);
				return;
			case DcatPackage.DATASET__CONTRIBUTOR_ID:
				setContributorID((ContributorID)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case DcatPackage.DATASET__DISTRIBUTION:
				getDistribution().clear();
				return;
			case DcatPackage.DATASET__SPATIAL_RESOLUTION_IN_METERS:
				getSpatialResolutionInMeters().clear();
				return;
			case DcatPackage.DATASET__TEMPORAL_RESOLUTION:
				getTemporalResolution().clear();
				return;
			case DcatPackage.DATASET__ACCRUAL_PERIODICITY:
				setAccrualPeriodicity((Concept)null);
				return;
			case DcatPackage.DATASET__SPATIAL:
				getSpatial().clear();
				return;
			case DcatPackage.DATASET__TEMPORAL:
				getTemporal().clear();
				return;
			case DcatPackage.DATASET__WAS_GENERATED_BY:
				getWasGeneratedBy().clear();
				return;
			case DcatPackage.DATASET__CONTRIBUTOR_ID:
				setContributorID((ContributorID)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case DcatPackage.DATASET__DISTRIBUTION:
				return distribution != null && !distribution.isEmpty();
			case DcatPackage.DATASET__SPATIAL_RESOLUTION_IN_METERS:
				return spatialResolutionInMeters != null && !spatialResolutionInMeters.isEmpty();
			case DcatPackage.DATASET__TEMPORAL_RESOLUTION:
				return temporalResolution != null && !temporalResolution.isEmpty();
			case DcatPackage.DATASET__ACCRUAL_PERIODICITY:
				return accrualPeriodicity != null;
			case DcatPackage.DATASET__SPATIAL:
				return spatial != null && !spatial.isEmpty();
			case DcatPackage.DATASET__TEMPORAL:
				return temporal != null && !temporal.isEmpty();
			case DcatPackage.DATASET__WAS_GENERATED_BY:
				return wasGeneratedBy != null && !wasGeneratedBy.isEmpty();
			case DcatPackage.DATASET__CONTRIBUTOR_ID:
				return contributorID != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (spatialResolutionInMeters: ");
		result.append(spatialResolutionInMeters);
		result.append(", temporalResolution: ");
		result.append(temporalResolution);
		result.append(", wasGeneratedBy: ");
		result.append(wasGeneratedBy);
		result.append(')');
		return result.toString();
	}

} //DatasetImpl
